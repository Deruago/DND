// DND grammar and lexicon
/
/  DND is a language that natural deduces abstract propositions.
/  Its usage is to check whether abstract propositions are tautologies.
/
//

DELETE: COMMENTS              [\\]+[^\n]*[\n]
DELETE: ESCAPE_CHARS          [\n\r\b\f\t]+
DELETE: SPACES                [\s]+

/ Generic user keywords
IGNORE: DEFINE                [dD]efine
IGNORE: IMPORT                [iI]mport

/ variables
IGNORE: VAR                   [vV]ar

/ User defined functions
IGNORE: FUNCTION              [fF]unction

/ logic
IGNORE: AND                   [aA]nd
IGNORE: OR                    [oO]r
IGNORE: NOT                   [nN]ot
IGNORE: IMPLICATION           [=][>]

/ equivalence
IGNORE: BI_IMPLICATION        [<][=][>]
IGNORE: EQUAL                 [=]

/ compare
IGNORE: GREATER_OR_EQUAL_THAN [>][=]
IGNORE: LESS_OR_EQUAL_THAN    [<][=]
IGNORE: GREATER_THAN          [>]
IGNORE: LESS_THAN             [<]

/ arithmetic
IGNORE: PLUS                  [+]
IGNORE: MINUS                 [-]
IGNORE: MULTIPLY              [*]
IGNORE: DIVIDE                [/]
IGNORE: POWER                 [\^]

/ Sets
IGNORE: NATURAL_SET          [nN]aturals
IGNORE: INTEGER_SET          [iI]ntegers

/ Set operation
IGNORE: ELEMENT_IN_SET       [iI]n

/ quantifiers
IGNORE: FOR_ALL              [fF]or[_\s]all
IGNORE: THERE_IS             [tT]here[_\s]is

/ symbols
IGNORE: LEFT_CURLY_BRACKET   [(]
IGNORE: RIGHT_CURLY_BRACKET  [)]
IGNORE: LEFT_BRACKET         [{]
IGNORE: RIGHT_BRACKET        [}]
IGNORE: LEFT_SQUARE_BRACKET  [\[]
IGNORE: RIGHT_SQUARE_BRACKET [\]]
IGNORE: COLON                [:]
IGNORE: COMMA                [,]

/ core values
TRUE                         [tT]rue
FALSE                        [fF]alse
VARNAME                      [a-zA-Z]+[a-zA-Z_0-9]*
NUMBER                       [0-9]+
DECIMAL                      [0-9]+[\.][0-9]+

prog
	stmts

stmts
	stmt stmts
	EMPTY

/ Main top language logic
GROUP: stmt value expression external_logic
GROUP: external_logic function_declaration variable_definition variable_initialization import_declaration

GROUP: quantifier for_all_quantifier there_is_quantifier

/ operators
GROUP: any_operator binary_operator unary_operator
GROUP: binary_operator binary_logic binary_arithmetic
GROUP: unary_operator unary_logic
GROUP: binary_arithmetic plus_arithmetic minus_arithmetic multiply_arithmetic divide_arithmetic power_arithmetic
GROUP: binary_logic and_logic or_logic implication_logic equal_logic bi_implication_logic greater_or_equal_than_logic greater_than_logic less_or_equal_than_logic less_than_logic
GROUP: unary_logic not_logic

GROUP: variable_declaration set_variable_declaration
GROUP: set_variable_declaration natural_variable_declaration integer_variable_declaration custom_set_variable_declaration function_variable_declaration custom_variable_variable_declaration
GROUP: expression single_expression dual_expression

plus_arithmetic
	PLUS
	
minus_arithmetic
	MINUS
	
multiply_arithmetic
	MULTIPLY
	
divide_arithmetic
	DIVIDE
	
power_arithmetic
	POWER

not_logic
	NOT

and_logic
	AND
	
or_logic
	OR
	
implication_logic
	IMPLICATION
	
equal_logic
	EQUAL
	
bi_implication_logic
	BI_IMPLICATION
	
greater_or_equal_than_logic
	GREATER_OR_EQUAL_THAN
	
greater_than_logic
	GREATER_THAN
	
less_or_equal_than_logic
	LESS_OR_EQUAL_THAN
	
less_than_logic
	LESS_THAN

	
for_all_quantifier
	FOR_ALL LEFT_SQUARE_BRACKET domain COLON function RIGHT_SQUARE_BRACKET

there_is_quantifier
	THERE_IS LEFT_SQUARE_BRACKET domain COLON function RIGHT_SQUARE_BRACKET

domain
	expression
	EMPTY

function
	expression
	EMPTY


integer_variable_declaration
	VAR varlist ELEMENT_IN_SET INTEGER_SET
	
natural_variable_declaration
	VAR varlist ELEMENT_IN_SET NATURAL_SET

custom_variable_variable_declaration
	VAR varlist ELEMENT_IN_SET VARNAME

custom_set_variable_declaration
	VAR varlist ELEMENT_IN_SET custom_set

function_variable_declaration
	VAR varlist ELEMENT_IN_SET function_call
	
function_call
	function_name function_argument_list

function_argument_list
	LEFT_CURLY_BRACKET valuelist RIGHT_CURLY_BRACKET
	
function_declaration_argument_list
	LEFT_CURLY_BRACKET varlist RIGHT_CURLY_BRACKET
	
function_name
	VARNAME

valuelist
	value COMMA value varlist
	value varlist
	EMPTY

varlist
	VARNAME varlist
	EMPTY
	
custom_set
	LEFT_BRACKET domain COLON function RIGHT_BRACKET
	
value
	NUMBER
	DECIMAL
	FALSE
	TRUE
	VARNAME
	LEFT_CURLY_BRACKET expression RIGHT_CURLY_BRACKET
	quantifier
	custom_set
	variable_declaration
	function_call

single_expression
	value
	unary_operator value

dual_expression
	value binary_operator value
	expression binary_operator expression

function_declaration
	DEFINE FUNCTION function_name function_declaration_argument_list block
	
variable_definition
	DEFINE VAR variable_name

variable_initialization
	DEFINE VAR variable_name EQUAL value

variable_name
	VARNAME
	
block
	LEFT_BRACKET stmts RIGHT_BRACKET
	
import_declaration
	IMPORT LESS_THAN imported_library_name GREATER_THAN

imported_library_name
	VARNAME
/